#------------------------------------------------------------------------
#  This workflow installs dependencies using Poetry
#  and runs tests on pull requests to the main branch.
#  It caches the virtual environment to speed up subsequent runs.
# Copied from https://github.com/marketplace/actions/install-poetry-action
#-------------------------------------------------------------------------
  name: pr-build-poetry

  on:
      pull_request:
        branches: [ main ]
      workflow_dispatch:
  
  jobs:
    pr-build-poetry:
      name: PR Build with Poetry
      runs-on: [self-hosted, linux, X64]
      container:
          image: starwitorg/base-python-image:0.0.6
          volumes:
              - ./:/code
      steps:
        #----------------------------------------------
        #       check-out repo and set-up python
        #----------------------------------------------
        - name: Check out repository
          uses: actions/checkout@v4
  
        - name: Setup
          run: |
            echo "POETRY_VER=$(poetry version -s)" >> $GITHUB_ENV
            echo "PYTHON_VER=$(python3 --version | cut -d ' ' -f 2)" >> $GITHUB_ENV
            python --version
            poetry --version

        # ðŸ“¦ First-level cache: .venv directory (fastest)
        - name: Restore .venv cache
          uses: actions/cache@v4
          id: venv-cache-init
          with:
            path: /code/.venv
            key: venv-${{ runner.os }}-torch
  
        # ðŸ“¦ First-level cache: .venv directory (fastest)
        #- name: Restore .venv cache
        #  uses: actions/cache@v4
        #  id: venv-cache
        #  with:
        #    path: /code/.venv
        #    key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}

        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
        - name: Install dependencies 2
          if: steps.venv-cache-init.outputs.cache-hit != 'true'
          run: |
            cd /cache-init
            poetry install --no-interaction --no-root
            cp /cache-init/.venv /code/.venv || true
  
        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
        #- name: Install dependencies
        #  if: steps.venv-cache.outputs.cache-hit != 'true'
        #  run: |
        #    cd /code
        #    poetry install --no-interaction --no-root
  
        #----------------------------------------------
        # install your root project, if required
        #----------------------------------------------
        - name: Install project
          run: |
            cd /code
            poetry install --no-interaction
        #----------------------------------------------
        #              run test suite
        #----------------------------------------------
        - name: Run tests
          run: |
            cd /code
            poetry run pytest
  
        # âœ” Optional: Re-cache .venv for future use
        - name: Save .venv for next run
          if: steps.venv-cache-init.outputs.cache-hit != 'true'
          uses: actions/cache/save@v4
          with:
            path: /cache-init/.venv
            key: venv-${{ runner.os }}-torch
  
    