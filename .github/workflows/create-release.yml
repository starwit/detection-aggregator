name: Create release

on:
  workflow_dispatch:
    inputs:
      versionChoice:
        type: choice
        required: true
        description: Version Change
        options:
        - patch
        - minor
        - major

permissions:
  contents: write

env:
  IMAGE_NAME: detection-aggregator
  DOCKERHUB_USERNAME: starwit
  DOCKERHUB_ORG: starwitorg   

jobs:
  create-release:
    name: create new release
    runs-on: [self-hosted, linux, X64]
    container:
      image: starwitorg/base-python-image:0.0.14
      volumes:
          - /home/githubrunner/.cache/pypoetry:/root/.cache/pypoetry

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.2.1        
        
      - name: create new version in pyproject.toml
        run: |
          poetry version $VERSION
        env:
          VERSION: ${{ inputs.versionChoice }}

      - name: commit new version
        run: |
          git config --global user.email "code@starwit.de"
          git config --global user.name "Starwit"
          git remote set-url --push origin https://Starwit:$GITHUB_TOKEN@github.com/starwit/detection-aggregator.git
          git add .
          modifications=$(git status | grep "modified" || true)
          if [ ! -z "$modifications" ]
          then
            echo "modifications found: $modifications"
            git commit -m "modified project version" ./pyproject.toml
            git push
          fi 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create github release
        run: | 
          APP_VERSION=$(cat pyproject.toml | grep "version" | cut -d'=' -f2 | xargs echo -n)
          gh release create $APP_VERSION -F README.md --title "${APP_VERSION}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_docker:
    name: "Build and publish docker"
    needs: create-release
    runs-on: [self-hosted, linux, X64]
    env:
      TAG: ${{ needs.create-release.outputs.APP_VERSION }}
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TAG }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          sbom: true
          provenance: mode=max
          push: true
          tags: ${{ env.DOCKERHUB_ORG }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
  
